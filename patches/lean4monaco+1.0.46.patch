diff --git a/node_modules/lean4monaco/dist/leanmonaco.js b/node_modules/lean4monaco/dist/leanmonaco.js
index 870c231..83144b0 100644
--- a/node_modules/lean4monaco/dist/leanmonaco.js
+++ b/node_modules/lean4monaco/dist/leanmonaco.js
@@ -31,7 +31,7 @@ export class LeanMonaco {
     taskGutter;
     infoviewEl;
     disposed = false;
-    async start(options) {
+    async start(options, callback = (msg) => ({})) {
         console.debug('[LeanMonaco]: starting');
         if (LeanMonaco.activeInstance == this) {
             console.warn('[LeanMonaco]: A LeanMonaco instance cannot be started twice.');
@@ -107,7 +107,7 @@ export class LeanMonaco {
             testLeanVersion: () => { return "lean4/stable"; },
             getElanDefaultToolchain: () => { return "lean4/stable"; }
         }, { appendLine: () => { }
-        }, checkLean4ProjectPreconditions, setupMonacoClient(this.getWebSocketOptions(options)) // TODO: `as any` hack
+        }, checkLean4ProjectPreconditions, setupMonacoClient(this.getWebSocketOptions(options), callback) // TODO: `as any` hack
         );
         const asAbsolutePath = (path) => {
             switch (path) {
diff --git a/node_modules/lean4monaco/dist/monacoleanclient.js b/node_modules/lean4monaco/dist/monacoleanclient.js
index d1e785d..0856cc9 100644
--- a/node_modules/lean4monaco/dist/monacoleanclient.js
+++ b/node_modules/lean4monaco/dist/monacoleanclient.js
@@ -1,6 +1,6 @@
 import { LanguageClientWrapper } from 'monaco-editor-wrapper';
 import { displayError } from './vscode-lean4/vscode-lean4/src/utils/notifs';
-export const setupMonacoClient = (options) => {
+export const setupMonacoClient = (options, callback = (msg) => ({})) => {
     return async (clientOptions, folderUri, elanDefaultToolchain) => {
         const languageClientWrapper = new LanguageClientWrapper();
         await languageClientWrapper.init({
@@ -21,6 +21,7 @@ export const setupMonacoClient = (options) => {
                                 else {
                                     next(message);
                                 }
+                                callback(message);
                             }
                         }
                     }
